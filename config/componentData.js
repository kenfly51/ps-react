module.exports = [{"name":"EyeIcon","description":"Eye Icon","code":"import React from 'react';\n\n/** Eye Icon */\nconst EyeIcon = () => {\n  return (\n    <div>\n      +\n    </div>\n  );\n};\n\nexport default EyeIcon;","examples":[{"name":"ExampleSimpleIcon","description":"Simple Icon","code":"import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\n/** Simple Icon */\nconst ExampleSimpleIcon = () => {\n  return <EyeIcon />\n};\n\nexport default ExampleSimpleIcon;"}]},{"name":"HelloWorld","description":"Hello world compoent description","props":{"message":{"type":{"name":"string"},"required":false,"description":"Description message a","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Hello world compoent description*/\nclass HelloWorld extends React.PureComponent {\n    render() {\n      return (<div>Hello {this.props.message}</div>);\n    }\n}\n\nHelloWorld.propTypes = {\n  /** Description message a*/\n  message: PropTypes.string, \n}\n\nHelloWorld.defaultProps = {\n  message: 'World',\n}\n\nexport default HelloWorld;\n","examples":[{"name":"ExampleHelloWorld","description":"Custom message","code":"import React from 'react';\nimport HelloWorld from 'ps-react/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Instance Noodle\" />\n}"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true","defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nconst Label = ({htmlFor, label, required}) => {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span>}\n    </label>\n  );\n};\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n  /** Label text */\n  label: PropTypes.string.isRequired,\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n}\n\nLabel.defaultProps = {\n  required: false\n}\n\nexport default Label;","examples":[{"name":"ExampleOptional","description":"Optional label","code":"import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Optional label */\nconst ExampleOptional = () => {\n  return <Label htmlFor=\"test\" label=\"test\" />\n};\n\nexport default ExampleOptional;"},{"name":"ExampleRequired","description":"Required label","code":"import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Required label */\nconst ExampleRequired = () => {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n};\n\nexport default ExampleRequired;"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends PureComponent {\n  getColor = (percent) => {\n    if (percent === 100) {\n      return 'green';\n    } else if (percent > 50) {\n      return 'lightgreen';\n    } else {\n      return 'red';\n    }\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n            width: this.getWidthAsPercentOfTotalWidth(),\n            height,\n            backgroundColor: this.getColor(percent)\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n  /** Bar height */\n  height: PropTypes.number,\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","examples":[{"name":"Example100Percent","description":"100% progress","code":"import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 100% progress */\nconst Example100Percent = () => {\n  return <ProgressBar percent={100} width={150} />\n};\n\nexport default Example100Percent;"},{"name":"Example10Percent","description":"10% progress","code":"import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% progress */\nconst Example10Percent = () => {\n  return <ProgressBar percent={10} width={150} />\n};\n\nexport default Example10Percent;"},{"name":"Example70Percent","description":"70% progress","code":"import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 70% progress */\nconst Example70Percent = () => {\n  return <ProgressBar percent={70} width={150} />\n};\n\nexport default Example70Percent;"}]},{"name":"ProgressBarCSSModules","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './progressBar.css';\n\nclass ProgressBarCSSModules extends PureComponent {\n  getColor = (percent) => {\n    if (percent === 100) {\n      return 'green';\n    } else if (percent > 50) {\n      return 'lightgreen';\n    } else {\n      return 'red';\n    }\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div className={styles.bar} style={{width: width}}>\n        <div style={{\n            width: this.getWidthAsPercentOfTotalWidth(),\n            height,\n            backgroundColor: this.getColor(percent)\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nProgressBarCSSModules.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n  /** Bar height */\n  height: PropTypes.number,\n};\n\nProgressBarCSSModules.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBarCSSModules;","examples":[{"name":"Example10Percent","description":"10% progress","code":"import React from 'react';\nimport ProgressBarCSSModules from 'ps-react/ProgressBarCSSModules';\n\n/** 10% progress */\nconst Example10Percent = () => {\n  return <ProgressBarCSSModules percent={10} width={150} />\n};\n\nexport default Example10Percent;"}]},{"name":"TextInput","description":"","code":"import React, { PureComponent } from 'react';\n\nclass TextInput extends PureComponent {\n  render() {\n    return (\n      <div>\n        \n      </div>\n    );\n  }\n}\n\nexport default TextInput;","examples":[]}]